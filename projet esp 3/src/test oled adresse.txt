/*
   ______               _                  _///_ _           _                   _
  /   _  \             (_)                |  ___| |         | |                 (_)
  |  [_|  |__  ___  ___ _  ___  _ __      | |__ | | ___  ___| |_ _ __ ___  _ __  _  ___  _   _  ___
  |   ___/ _ \| __|| __| |/ _ \| '_ \_____|  __|| |/ _ \/  _|  _| '__/   \| '_ \| |/   \| | | |/ _ \
  |  |  | ( ) |__ ||__ | | ( ) | | | |____| |__ | |  __/| (_| |_| | | (_) | | | | | (_) | |_| |  __/
  \__|   \__,_|___||___|_|\___/|_| [_|    \____/|_|\___|\____\__\_|  \___/|_| |_|_|\__  |\__,_|\___|
                                                                                      | |
                                                                                      \_|
  Fichier :       scannerI2C.ino
  
  Description :   Scanne les 127 adresses i2c possibles, à la recherche de périphériques connectés sur l'Arduino
                  (affiche l'adresse des périphériques détectés)

  Auteur :        Jérôme TOMSKI (https://passionelectronique.fr/)
  Créé le :       25.07.2021

*/
/*Périphérique i2c trouvé à l'adresse : 0 (0x0)
Périphérique i2c trouvé à l'adresse : 32 (0x20)
Périphérique i2c trouvé à l'adresse : 60 (0x3C)
Périphérique i2c trouvé à l'adresse : 80 (0x50)
Périphérique i2c trouvé à l'adresse : 98 (0x62)
*/
#include "Arduino.h"
#include <Wire.h>                         // Appel de la bibliothèque Wire.h, afin de pouvoir envoyer des commandes sur le port i2c

/*
   ______               _                  _///_ _           _                   _
  /   _  \             (_)                |  ___| |         | |                 (_)
  |  [_|  |__  ___  ___ _  ___  _ __      | |__ | | ___  ___| |_ _ __ ___  _ __  _  ___  _   _  ___
  |   ___/ _ \| __|| __| |/ _ \| '_ \_____|  __|| |/ _ \/  _|  _| '__/   \| '_ \| |/   \| | | |/ _ \
  |  |  | ( ) |__ ||__ | | ( ) | | | |____| |__ | |  __/| (_| |_| | | (_) | | | | | (_) | |_| |  __/
  \__|   \__,_|___||___|_|\___/|_| [_|    \____/|_|\___|\____\__\_|  \___/|_| |_|_|\__  |\__,_|\___|
                                                                                      | |
                                                                                      \_|
  Fichier :       allumeTousLesPixelsOLEDssd1306.ino
  
  Description :   Permet de vérifier visuellement le bon fonctionnement de tous les pixels d'un écran OLED 128x64 pixels,
                  fonctionnant sur un chipset SSD1306

  Auteur :        Jérôme TOMSKI (https://passionelectronique.fr/)
  Créé le :       25.07.2021

*/


#include <Adafruit_SSD1306.h>

#define nombreDePixelsEnLargeur 128         // Taille de l'écran OLED, en pixel, au niveau de sa largeur
#define nombreDePixelsEnHauteur 64          // Taille de l'écran OLED, en pixel, au niveau de sa hauteur
#define brocheResetOLED         -1          // Reset de l'OLED partagé avec l'Arduino (d'où la valeur à -1, et non un numéro de pin)
#define adresseI2CecranOLED     0x3C        // Adresse de "mon" écran OLED sur le bus i2c (généralement égal à 0x3C ou 0x3D)

Adafruit_SSD1306 ecranOLED(nombreDePixelsEnLargeur, nombreDePixelsEnHauteur, &Wire, brocheResetOLED);


// ========================
// Initialisation programme
// ========================
void setup() {

  // Initialisation de l'écran OLED
  if(!ecranOLED.begin(SSD1306_SWITCHCAPVCC, adresseI2CecranOLED))
    while(1);                               // Arrêt du programme (boucle infinie) si échec d'initialisation
  

  // *************************************************************************
  // Affichage de 3 écrans successifs, avec zoom sur police x1, puis x2, et x3
  // *************************************************************************
  for(byte tailleDeCaractere=1; tailleDeCaractere <=3; tailleDeCaractere++) {
    boolean bCouleurInverse = false;
    ecranOLED.clearDisplay();                                   // Effaçage de l'intégralité du buffer
    ecranOLED.setTextSize(tailleDeCaractere);                   // Taille des caractères (1:1, puis 2:1, puis 3:1)
    ecranOLED.setCursor(0, 0);                                  // Déplacement du curseur en position (0,0), c'est à dire dans l'angle supérieur gauche

    // ***********************************************************************
    // Affichage de 8 lignes à couleurs alternées, dans chaque écran successif
    // ***********************************************************************
    for(byte numeroDeLigne=1; numeroDeLigne<=8; numeroDeLigne++) {
      if(bCouleurInverse)
        ecranOLED.setTextColor(SSD1306_BLACK, SSD1306_WHITE);   // Couleur du texte, et couleur du fond
      else
        ecranOLED.setTextColor(SSD1306_WHITE);                  // Affichage du texte en "blanc" (avec la couleur principale, en fait, car l'écran monochrome peut être coloré)
      ecranOLED.print("Ligne ");
      ecranOLED.println(numeroDeLigne);
      bCouleurInverse = !bCouleurInverse;
    }
    ecranOLED.display();                            // Transfert le buffer à l'écran
    delay(2000);
  }
  
  
}

// =================
// Boucle principale
// =================
void loop() {
  // Aucun code dans cette partie, car tout se passe dans la fonction setup !
  
}