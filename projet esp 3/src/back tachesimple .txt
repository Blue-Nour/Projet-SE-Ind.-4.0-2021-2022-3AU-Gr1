
#include <Arduino.h>
#include <Tone32.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <SPI.h>

#include <Adafruit_SSD1306.h>

#define nombreDePixelsEnLargeur 128         // Taille de l'écran OLED, en pixel, au niveau de sa largeur
#define nombreDePixelsEnHauteur 64          // Taille de l'écran OLED, en pixel, au niveau de sa hauteur
#define brocheResetOLED         -1          // Reset de l'OLED partagé avec l'Arduino (d'où la valeur à -1, et non un numéro de pin)
#define adresseI2CecranOLED     0x3C        // Adresse de "mon" écran OLED sur le bus i2c (généralement égal à 0x3C ou 0x3D)

Adafruit_SSD1306 ecranOLED(nombreDePixelsEnLargeur, nombreDePixelsEnHauteur, &Wire, brocheResetOLED);

int bp_1_Pin  = 18 ; // stop buzzer
int bp_2_Pin  = 19 ; // on/off
int bp1State = 0 ;
int bp2State = 0 ; 
int bp1Old = 0; 
int bp2Old = 0;
int bp2value = 0 ; //toggle  I/O
int bp1value = 0 ; 
boolean bCouleurInverse = false;


int buzzer_Pin  = 23;
int oled_slc_Pin = 22; 
int oled_sda_Pin = 21;
int led_1_Pin = 15;
int led_2_Pin = 2;

TaskHandle_t task1_handle  = NULL ; 
TaskHandle_t task2_handle  = NULL ; 
TaskHandle_t task3_handle  = NULL ; 

//task btn qui va toggle la led A 500ms et la led B 250ms
void task1_BP2_OnOff(void *parameters){
    for(;;){
        Serial.println("Task 1 btn ");
        Serial.print(bp2value);
        Serial.print(digitalRead(bp_2_Pin));
        if (digitalRead(bp_2_Pin)==HIGH){
            if (bp2Old==0){ // détéction de front montant 
                bp2Old = 1 ; 
                Serial.println("on ");
                bp2value = (bp2value+1)%2; // toggle
                digitalWrite(led_2_Pin,bp2value);
                Serial.println(bp2value);
               }
        }
        else{bp2Old = 0;}

        vTaskDelay(50/portTICK_PERIOD_MS);
        if (bp2value == 1) {
            

        }
    }
}

void task2_buzzer(void *parameters){
    for(;;){
        vTaskDelay(100/portTICK_PERIOD_MS); 
        digitalWrite(led_1_Pin,HIGH);
        
        //tone(buzzer_Pin,523,1000,0);
        unsigned int frequency = 440 ;
        unsigned long duration = 100;
        int channel = 1 ;
         if (ledcRead(channel)) {
        log_e("Tone channel %d is already in use", ledcRead(channel));
        return;
        }
        ledcAttachPin(buzzer_Pin, channel);
        ledcWriteTone(channel, frequency);
        if (duration) {
            vTaskDelay(duration/portTICK_PERIOD_MS); 
            noTone(buzzer_Pin, channel);
        }  
        digitalWrite(led_1_Pin,LOW);
        
}
}

void task3_bp_buzzer(void *parameters){
    for(;;){
        Serial.println("Task 3 btn ");
        Serial.print(bp1value);
        Serial.print(digitalRead(bp_1_Pin));
        if (digitalRead(bp_1_Pin)==HIGH){
            if (bp1Old==0){ // détéction de front montant 
                bp1Old = 1 ; 
                Serial.println("on ");
                bp1value = (bp1value+1)%2; // toggle
                
                if (bp1value ==1){
                    vTaskResume(task2_handle);
                    }
                else {vTaskSuspend(task2_handle);
                tone(buzzer_Pin,0,0,0);
                digitalWrite(led_1_Pin,LOW);
                }
                
                Serial.println(bp1value);
               }
        }
        
        else{bp1Old = 0;}

        vTaskDelay(50/portTICK_PERIOD_MS);
    }

}


void setup() {


  Serial.begin(9600);
  pinMode(led_1_Pin, OUTPUT);
  pinMode(led_2_Pin,OUTPUT);
  pinMode(bp_1_Pin,INPUT);
  pinMode(bp_2_Pin,INPUT);
  xTaskCreate(
          task1_BP2_OnOff,//nom de la fonction
          "task 1 on off",// nom de la tache 
          1000,//taille aloue a notre tache 
          NULL,//parameters task
          2,//priorité de la tache 
          &task1_handle // gestion de tache 
      );
  xTaskCreate(
        task2_buzzer,//nom de la fonction
        "task 2 buzzer",// nom de la tache 
        1000,//taille aloue a notre tache 
        NULL,//parameters task
        2,//priorité de la tache 
        &task2_handle // gestion de tache 
    );
xTaskCreate(
        task3_bp_buzzer,//nom de la fonction
        "task 3 bp 1 urg",// nom de la tache 
        1000,//taille aloue a notre tache 
        NULL,//parameters task
        2,//priorité de la tache 
        &task3_handle // gestion de tache 
    );
}



void loop() {



} 