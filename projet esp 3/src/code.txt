
#include <Arduino.h>
#include <Tone32.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <SPI.h>

#include <Adafruit_SSD1306.h>

#define nombreDePixelsEnLargeur 128         // Taille de l'écran OLED, en pixel, au niveau de sa largeur
#define nombreDePixelsEnHauteur 64          // Taille de l'écran OLED, en pixel, au niveau de sa hauteur
#define brocheResetOLED         -1          // Reset de l'OLED partagé avec l'Arduino (d'où la valeur à -1, et non un numéro de pin)
#define adresseI2CecranOLED     0x3C        // Adresse de "mon" écran OLED sur le bus i2c (généralement égal à 0x3C ou 0x3D)

Adafruit_SSD1306 ecranOLED(nombreDePixelsEnLargeur, nombreDePixelsEnHauteur, &Wire, brocheResetOLED);

int bp_1_Pin  = 19 ;
int bp_2_Pin  = 18 ;
int bp1State = 0 ;
int bp2State = 0 ; 
int bp1Old = 0; 
int bp2Old = 0;
int bp2value = 0 ; //toggle  I/O
boolean bCouleurInverse = false;


int buzzer_Pin  = 23;
int oled_slc_Pin = 22; 
int oled_sda_Pin = 21;
int led_1_Pin = 15;
int led_2_Pin = 2;





void urgence(){// fonction d'urgence bip boop 
    bp1State = 0;
    while (not bp1State){
        digitalWrite(led_1_Pin,HIGH);
        tone(buzzer_Pin,523,1000,0);
        digitalWrite(led_1_Pin,LOW);
        
   

        if ((digitalRead(bp_1_Pin)) and (bp1Old==0) ) { // détect front montant et sort du while si oui
            bp1State = 1; }
        else if (not digitalRead(bp_1_Pin)) 
        {bp1State = 0;}
        delay(500);
    }
}



void oled(){

}





void setup(){
   
    pinMode(bp_1_Pin,INPUT);
    pinMode(bp_2_Pin,INPUT);
    pinMode(led_1_Pin,OUTPUT);
    pinMode(led_2_Pin,OUTPUT);

    Serial.begin(9600);


    // Initialisation de l'écran OLED
    if(!ecranOLED.begin(SSD1306_SWITCHCAPVCC, adresseI2CecranOLED))
        while(1);                               // Arrêt du programme (boucle infinie) si échec d'initialisation

    ecranOLED.clearDisplay();                                   // Effaçage de l'intégralité du buffer
    ecranOLED.setTextSize(2.5);                   // Taille des caractères (1:1, puis 2:1, puis 3:1)
    ecranOLED.setCursor(0, 0);  
}

void loop(){


if (digitalRead(bp_2_Pin)){
    bp2Old = 1;
    
}
else if (not digitalRead(bp_2_Pin) and (bp2Old == 1)){// front descendant 
    bp2Old  = 0; 
    bp2value = (bp2value +1) % 2 ;// toggle on / off 
    if (bp2value){digitalWrite(led_2_Pin,HIGH);}// affichage état on/off
    else {digitalWrite(led_2_Pin,LOW);}
     Serial.print("off");



}
if (bp2value){//programme 
    ecranOLED.setTextColor(SSD1306_WHITE, SSD1306_BLACK); 
    // 10 caract par ligne en size 2 
     ecranOLED.print("app1 |");
    ecranOLED.println("app2");
    ecranOLED.print("21*C |");
    ecranOLED.println("10*C");
    ecranOLED.print("50%  |");
    ecranOLED.println("100%");
    ecranOLED.print("100W |");
    ecranOLED.println("400W");
    //lux en % car pas de place
    
    ecranOLED.display(); 

    /*
 for(byte numeroDeLigne=1; numeroDeLigne<=8; numeroDeLigne++) {
        if(bCouleurInverse)
            ecranOLED.setTextColor(SSD1306_BLACK, SSD1306_WHITE);   // Couleur du texte, et couleur du fond
        else
            ecranOLED.setTextColor(SSD1306_WHITE);                  // Affichage du texte en "blanc" (avec la couleur principale, en fait, car l'écran monochrome peut être coloré)
        ecranOLED.print("Ligne ");
        ecranOLED.println(numeroDeLigne);
        bCouleurInverse = !bCouleurInverse;
        }
        ecranOLED.display(); 
  */ 
}
//Serial.print("kjhdqskdjqhsdlqkd");
delay(50);
}



